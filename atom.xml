<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mike&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mikeblog.top/"/>
  <updated>2019-08-17T07:34:26.496Z</updated>
  <id>https://mikeblog.top/</id>
  
  <author>
    <name>Jiayun-Ye</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文本分析和格式化脚本-Awk</title>
    <link href="https://mikeblog.top/2019/04/03/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90%E5%92%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%84%9A%E6%9C%AC-awk/"/>
    <id>https://mikeblog.top/2019/04/03/文本分析和格式化脚本-awk/</id>
    <published>2019-04-03T12:50:27.000Z</published>
    <updated>2019-08-17T07:34:26.496Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Awk-简介&quot;&gt;&lt;a href=&quot;#Awk-简介&quot; class=&quot;headerlink&quot; title=&quot;Awk 简介&quot;&gt;&lt;/a&gt;Awk 简介&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/awk.png?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;Awk工作流程图&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt;有时候，我们需要非常强有力的工具，来控制和处理我们的数据文件，达到对文件进行分析、统计、格式化输出的效果，没错，&lt;code&gt;Awk&lt;/code&gt; 就是这样一款工具。&lt;/strong&gt; &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="script" scheme="https://mikeblog.top/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>经典排序算法</title>
    <link href="https://mikeblog.top/2019/03/31/%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://mikeblog.top/2019/03/31/经典排序算法/</id>
    <published>2019-03-30T16:13:46.000Z</published>
    <updated>2019-08-17T07:34:26.497Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;经典排序算法&quot;&gt;&lt;a href=&quot;#经典排序算法&quot; class=&quot;headerlink&quot; title=&quot;经典排序算法&quot;&gt;&lt;/a&gt;经典排序算法&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F%E6%95%88%E7%8E%87.jpg?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;sort-algorithm&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;上图是经典排序算法的效率图，大致敲了一遍，堆排序、希尔排序、归并排序，思想真的很巧妙，关键还是看思路。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://mikeblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://mikeblog.top/2019/03/15/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://mikeblog.top/2019/03/15/二叉树/</id>
    <published>2019-03-14T16:24:51.000Z</published>
    <updated>2019-08-17T07:34:26.494Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;近况&quot;&gt;&lt;a href=&quot;#近况&quot; class=&quot;headerlink&quot; title=&quot;近况&quot;&gt;&lt;/a&gt;近况&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/c++11/%E4%BA%8C%E5%8F%89%E6%A0%91.jpg?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;Binary-Tree&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;最近实在太忙了，上周末还加了两天班，这两天利用晚上下班时间(并不是正常下班, 你懂的)，把二叉树相关的算法大概敲了一遍，找找感觉。&lt;br&gt;
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://mikeblog.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux 程序异常排查</title>
    <link href="https://mikeblog.top/2019/03/05/Linux-%E7%A8%8B%E5%BA%8F%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/"/>
    <id>https://mikeblog.top/2019/03/05/Linux-程序异常排查/</id>
    <published>2019-03-04T16:20:29.000Z</published>
    <updated>2019-08-17T07:34:26.493Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;痛并快乐着&quot;&gt;&lt;a href=&quot;#痛并快乐着&quot; class=&quot;headerlink&quot; title=&quot;痛并快乐着&quot;&gt;&lt;/a&gt;痛并快乐着&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/%E6%80%A7%E8%83%BD%E5%B7%A5%E5%85%B7/%E7%97%9B%E5%B9%B6%E5%BF%AB%E4%B9%90%E7%9D%80.jpg?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;痛并快乐着&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;今天讲讲&lt;code&gt;C/C++&lt;/code&gt;程序的常用调试手段，介绍调试手段之前，我会首先对开发过程中可能遇到的问题进行一个总结，大概可以把问题分为以下几类：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;必现的程序逻辑错误&lt;br&gt;概率性错误&lt;br&gt;进程卡死或挂掉，系统变卡，&lt;code&gt;cpu&lt;/code&gt; 调度变慢&lt;br&gt;程序正常，程序性能瓶颈分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三年下来，排查的问题不少，该遇到的都遇到了，不该遇到的也遇到了，只能说五味杂陈。&lt;br&gt;
    
    </summary>
    
    
      <category term="程序调试与问题排查" scheme="https://mikeblog.top/tags/%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E4%B8%8E%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>C++ 11</title>
    <link href="https://mikeblog.top/2019/02/23/C-11/"/>
    <id>https://mikeblog.top/2019/02/23/C-11/</id>
    <published>2019-02-23T04:31:39.000Z</published>
    <updated>2019-08-17T07:34:26.491Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/c++11/timg.jpg?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;C++11&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;code&gt;C++&lt;/code&gt; 总共有四个官方版本，都是以 &lt;code&gt;ISO&lt;/code&gt; 标准被接受的年份命名的，它们是 &lt;code&gt;C++98&lt;/code&gt;, &lt;code&gt;C++03&lt;/code&gt;, &lt;code&gt;C++11&lt;/code&gt;和&lt;code&gt;C++14&lt;/code&gt;。&lt;code&gt;C++98&lt;/code&gt; 和 &lt;code&gt;C++03&lt;/code&gt; 仅有一些技术细节上的不同，可以统称为 &lt;code&gt;C++98&lt;/code&gt;，&lt;code&gt;C++14&lt;/code&gt;则是&lt;code&gt;C++11&lt;/code&gt;的超集。总的来说，&lt;code&gt;C++11&lt;/code&gt;是&lt;code&gt;C++&lt;/code&gt;所有版本中跳跃性最大的一个版本，很多人认为相对之前的版本，&lt;code&gt;C++11&lt;/code&gt;是一个新语言。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://mikeblog.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 对象模型</title>
    <link href="https://mikeblog.top/2019/02/15/C-%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>https://mikeblog.top/2019/02/15/C-对象模型/</id>
    <published>2019-02-15T13:42:53.000Z</published>
    <updated>2019-08-17T07:34:26.491Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/c++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B.png?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;C++对象模型&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;我们知道， &lt;code&gt;C++&lt;/code&gt; 是一个语言联邦，包括 &lt;code&gt;C&lt;/code&gt;、&lt;code&gt;Object-Oriented C++&lt;/code&gt;、&lt;code&gt;Template C++&lt;/code&gt;、&lt;code&gt;STL&lt;/code&gt;。&lt;code&gt;OO&lt;/code&gt;部分可以说是&lt;code&gt;C++&lt;/code&gt;的核心部分，也是最为熟悉与陌生的地方，熟悉是因为每时每刻都在使用，像 &lt;code&gt;C&lt;/code&gt; 语言这种过程式的语言，给人感觉总是十分的直接明了，无非就是堆栈建制，函数栈的切换，但是 &lt;code&gt;OO&lt;/code&gt;不一样，编译器为我们做了太多的事情，构造，析构，虚函数，继承，多态…或者在&lt;code&gt;member function&lt;/code&gt;中加入一些额外参数(&lt;code&gt;this&lt;/code&gt;指针)，导致我们去计算对象的空间占用、函数调用的性能时，结果往往是意想不到的。&lt;br&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://mikeblog.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>春节回家</title>
    <link href="https://mikeblog.top/2019/02/06/%E6%98%A5%E8%8A%82%E5%9B%9E%E5%AE%B6/"/>
    <id>https://mikeblog.top/2019/02/06/春节回家/</id>
    <published>2019-02-06T05:47:02.000Z</published>
    <updated>2019-08-17T07:34:26.496Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;春节回家&quot;&gt;&lt;a href=&quot;#春节回家&quot; class=&quot;headerlink&quot; title=&quot;春节回家&quot;&gt;&lt;/a&gt;春节回家&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/2019%E6%98%A5%E8%8A%82/%E5%AE%8B%E9%A3%8E-5.jpg?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;宋风&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt;小镇上一个新的景点，最近在朋友圈疯狂刷屏，宋风刘家秀美乡村建设点，定位是力争建成省级4A级秀美乡村。&lt;/strong&gt; &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikeblog.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>CMake</title>
    <link href="https://mikeblog.top/2019/01/26/CMake/"/>
    <id>https://mikeblog.top/2019/01/26/CMake/</id>
    <published>2019-01-26T14:37:26.000Z</published>
    <updated>2019-08-17T07:34:26.492Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CMake-介绍&quot;&gt;&lt;a href=&quot;#CMake-介绍&quot; class=&quot;headerlink&quot; title=&quot;CMake 介绍&quot;&gt;&lt;/a&gt;CMake 介绍&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/%E7%BC%96%E8%AF%91/cmake.png?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;CMake&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt;CMake 是一个开源的跨平台工具系列，旨在构建，测试和打包软件。 CMake 用于使用简单的平台和独立于编译器的配置文件来控制软件编译过程，并生成可在你选择的编译器环境中使用的本机 makefile 和工作空间。&lt;/strong&gt; &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编译 (compile)" scheme="https://mikeblog.top/tags/%E7%BC%96%E8%AF%91-compile/"/>
    
  </entry>
  
  <entry>
    <title>GDB</title>
    <link href="https://mikeblog.top/2019/01/23/GDB/"/>
    <id>https://mikeblog.top/2019/01/23/GDB/</id>
    <published>2019-01-23T12:53:27.000Z</published>
    <updated>2019-08-17T07:34:26.492Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;What-is-GDB&quot;&gt;&lt;a href=&quot;#What-is-GDB&quot; class=&quot;headerlink&quot; title=&quot;What is GDB?&quot;&gt;&lt;/a&gt;&lt;strong&gt;What is GDB?&lt;/strong&gt;&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/%E7%BC%96%E8%AF%91/gdb.png?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;gdb&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;官方文档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://sourceware.org/gdb/download/onlinedocs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sourceware.org/gdb/download/onlinedocs/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;GDB&lt;/code&gt; 是 &lt;code&gt;GNU&lt;/code&gt; 项目的调试器，你可以用 &lt;code&gt;GDB&lt;/code&gt; 查看另一个程序在执行过程中的内部内容, 或者在程序崩溃时，查看程序当时正在执行的操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="GNU Software" scheme="https://mikeblog.top/tags/GNU-Software/"/>
    
  </entry>
  
  <entry>
    <title>MakeFile 编写</title>
    <link href="https://mikeblog.top/2019/01/20/make/"/>
    <id>https://mikeblog.top/2019/01/20/make/</id>
    <published>2019-01-19T22:33:40.000Z</published>
    <updated>2019-08-17T07:34:26.493Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;程序的编译与链接&quot;&gt;&lt;a href=&quot;#程序的编译与链接&quot; class=&quot;headerlink&quot; title=&quot;程序的编译与链接&quot;&gt;&lt;/a&gt;程序的编译与链接&lt;/h2&gt;&lt;figure class=&quot;highlight makefile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Top level makefile, the real shit is at src/Makefile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;default: all&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;.DEFAULT:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cd src &amp;amp;&amp;amp; &lt;span class=&quot;variable&quot;&gt;$(MAKE)&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;install:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cd src &amp;amp;&amp;amp; &lt;span class=&quot;variable&quot;&gt;$(MAKE)&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&lt;span class=&quot;meta-keyword&quot;&gt;.PHONY&lt;/span&gt;: install&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;&lt;strong&gt;GNU Make 是一个工具，它从程序的源文件中控制程序的可执行文件和其他非源文件的生成。&lt;/strong&gt; &lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="编译 (compile)" scheme="https://mikeblog.top/tags/%E7%BC%96%E8%AF%91-compile/"/>
    
      <category term="GNU Software" scheme="https://mikeblog.top/tags/GNU-Software/"/>
    
  </entry>
  
  <entry>
    <title>C++ 多线程编程</title>
    <link href="https://mikeblog.top/2019/01/12/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>https://mikeblog.top/2019/01/12/C-多线程编程/</id>
    <published>2019-01-12T11:03:08.000Z</published>
    <updated>2019-08-17T07:34:26.491Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多线程编程&quot;&gt;&lt;a href=&quot;#多线程编程&quot; class=&quot;headerlink&quot; title=&quot;多线程编程&quot;&gt;&lt;/a&gt;多线程编程&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MutexLock&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MutexLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~MutexLock();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MutexLock(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MutexLock &amp;amp;mutex) = &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  MutexLock &amp;amp;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;=(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; MutexLock &amp;amp;mutex) = &lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;IsLockedByThisThread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; *getPthreadMutex();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;friend&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Condition&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;pid_t&lt;/span&gt; holder_;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这段时间，主要在分析和整理多线程相关的内容，主要是因为工作中我有负责部门基础库的开发维护，其中就包括线程库，然后近期要在组内做异步这一块的分享，所以也希望趁这个机会对这一块知识进行系统的梳理，然后自己也将 posix-thread 线程重新使用了一下，加深印象，基本覆盖到了相关关键接口的使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="多线程编程" scheme="https://mikeblog.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 单元测试框架-gtest</title>
    <link href="https://mikeblog.top/2019/01/02/googletest/"/>
    <id>https://mikeblog.top/2019/01/02/googletest/</id>
    <published>2019-01-02T14:48:13.000Z</published>
    <updated>2019-08-17T07:34:26.493Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Unit-Test-和-gtest-介绍&quot;&gt;&lt;a href=&quot;#Unit-Test-和-gtest-介绍&quot; class=&quot;headerlink&quot; title=&quot;Unit Test 和 gtest 介绍&quot;&gt;&lt;/a&gt;Unit Test 和 gtest 介绍&lt;/h2&gt;&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;https://github.com/Yejy813/pictures/blob/master/%E6%B5%8B%E8%AF%95/Test.png?raw=true&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;UnitTest&quot;&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;单元测试&lt;/strong&gt;（ &lt;code&gt;Unit Test&lt;/code&gt; ，模块测试）是开发者编写的一小段代码，用于检验被测代码的一个很小的、很明确的功能是否正确，通过编写单元测试可以在编码阶段发现程序编码错误，甚至是程序设计错误。&lt;/p&gt;
&lt;p&gt;单元测试不但可以增加开发者对于所完成代码的自信，同时，好的单元测试用例往往可以在 &lt;strong&gt;回归测试&lt;/strong&gt; 的过程中，很好地保证之前所发生的修改没有破坏已有的程序逻辑。因此，单元测试不但不会成为开发者的负担，反而可以在保证开发质量的情况下，加速迭代开发的过程。&lt;br&gt;
    
    </summary>
    
    
      <category term="测试" scheme="https://mikeblog.top/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>你有困惑吗</title>
    <link href="https://mikeblog.top/2018/12/15/%E4%BD%A0%E6%9C%89%E5%9B%B0%E6%83%91%E5%90%97/"/>
    <id>https://mikeblog.top/2018/12/15/你有困惑吗/</id>
    <published>2018-12-15T10:22:56.000Z</published>
    <updated>2019-08-17T07:34:26.494Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;工程师层级人员讨论会-–-2018-12-7&quot;&gt;&lt;a href=&quot;#工程师层级人员讨论会-–-2018-12-7&quot; class=&quot;headerlink&quot; title=&quot;工程师层级人员讨论会  – 2018-12-7&quot;&gt;&lt;/a&gt;工程师层级人员讨论会  – 2018-12-7&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/Engineer.jpg?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;上周，部门主管黄总和HR组织了一场讨论会，召集了大概20个开发，大概水平都是处于工程师层级，这个层级评定和你工作年龄无关，而是和你的工作产出，负责项目相关。在我看来，过去的大部分都是业务骨干，因为基本涉及部门所有产品线的所有开发人员，有工作两年的，工作4年，5年，8年的。
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikeblog.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>进程间通信-消息队列</title>
    <link href="https://mikeblog.top/2018/11/24/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-2018-11-24/"/>
    <id>https://mikeblog.top/2018/11/24/进程间通信-消息队列-2018-11-24/</id>
    <published>2018-11-24T01:30:16.000Z</published>
    <updated>2019-08-17T07:34:26.497Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Message-Queue-使用场景&quot;&gt;&lt;a href=&quot;#Message-Queue-使用场景&quot; class=&quot;headerlink&quot; title=&quot;Message Queue 使用场景&quot;&gt;&lt;/a&gt;Message Queue 使用场景&lt;/h2&gt;&lt;p&gt;今天介绍一下消息队列，对此做个总结，酝酿了有一段时间，因为消息队列在开发中占据了一个很重要的地位。&lt;/p&gt;
&lt;p&gt;一般这种系统设施，如果你是在 &lt;code&gt;Linux&lt;/code&gt; 系统用户空间进行开发(内核开发除外的所有开发)，需要懂得其原理、接口使用、消息框架构建机制、封装系统提供的 &lt;code&gt;MQ&lt;/code&gt; 接口来对上层提供服务。如果你是从事内核开发，那还需要将这些系统设施的实现了解清楚。&lt;br&gt;
    
    </summary>
    
    
      <category term="多线程编程" scheme="https://mikeblog.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
      <category term="操作系统" scheme="https://mikeblog.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="设计模式" scheme="https://mikeblog.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>不一样的周一</title>
    <link href="https://mikeblog.top/2018/11/19/%E9%9A%8F%E7%AC%94-%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%91%A8%E4%B8%80-2018-11-19/"/>
    <id>https://mikeblog.top/2018/11/19/随笔-不一样的周一-2018-11-19/</id>
    <published>2018-11-19T13:37:57.000Z</published>
    <updated>2019-08-17T07:34:26.497Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/timg.jpg?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;br&gt;今天是 2018-11-19 日，周一，和以往的周一不太一样，首先我旁边少了一个人，导师加主管，上周离职了，惊讶加不解。不解的是公司发展到现在不容易，而他做到这个位置同样不易，而且已经不搞技术很久了，年龄也到了不惑有一，如果离开现在公司，外面还有更好的地方可以去吗？&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://mikeblog.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>操作系统-进程互斥和同步</title>
    <link href="https://mikeblog.top/2018/11/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5%E5%92%8C%E5%90%8C%E6%AD%A5-2018-11-18/"/>
    <id>https://mikeblog.top/2018/11/18/操作系统-进程互斥和同步-2018-11-18/</id>
    <published>2018-11-18T13:34:13.000Z</published>
    <updated>2019-08-17T07:34:26.495Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98.png?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么会有同步和互斥？ 因为计算机系统中有多个进程存在，多个进程间进行交互，会引起它们对 &lt;strong&gt;共享资源&lt;/strong&gt;的访问，如果这些资源处理不当，就可能出现一些意想不到的情况，比如说 &lt;strong&gt;饥饿，死锁&lt;/strong&gt;等一系列问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="多线程编程" scheme="https://mikeblog.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
      <category term="操作系统" scheme="https://mikeblog.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统--进程间通信(一)</title>
    <link href="https://mikeblog.top/2018/11/14/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-2018-11-14/"/>
    <id>https://mikeblog.top/2018/11/14/操作系统-进程间通信-2018-11-14/</id>
    <published>2018-11-14T14:13:04.000Z</published>
    <updated>2019-08-17T07:34:26.495Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;IPC-运用范畴&quot;&gt;&lt;a href=&quot;#IPC-运用范畴&quot; class=&quot;headerlink&quot; title=&quot;IPC 运用范畴&quot;&gt;&lt;/a&gt;IPC 运用范畴&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/Snipaste_2018-11-12_22-04-22.png?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;配图与本文无关，纯属有趣&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相对于做点什么，我们更想睡懒觉，但是相对于睡觉，我想写总结！&lt;br&gt;今天把博客的 &lt;code&gt;git&lt;/code&gt; 分支搞混了，浪费了一点时间。那么今天介绍一下进程间通信(&lt;code&gt;IPC&lt;/code&gt;) 。进程间通信，我们从 &amp;lt;&amp;lt; &lt;code&gt;UNIX&lt;/code&gt;网络编程卷2：进程间通信 &amp;gt;&amp;gt; 最后一章 &lt;strong&gt;Sun RPC&lt;/strong&gt; 谈起，那为什么呢？ 因为我们去掌握一个东西，肯定是因为它有价值，我们才去学习，如果一些技术现在都不用了，淘汰了，那我们就没有必要去深究，只需学习其思想，浅尝辄止即可。&lt;br&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mikeblog.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统-线程概述</title>
    <link href="https://mikeblog.top/2018/11/09/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%BA%BF%E7%A8%8B%E6%A6%82%E8%BF%B0-2018-11-9/"/>
    <id>https://mikeblog.top/2018/11/09/操作系统-线程概述-2018-11-9/</id>
    <published>2018-11-09T14:13:59.000Z</published>
    <updated>2019-08-17T07:34:26.494Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么使用线程&quot;&gt;&lt;a href=&quot;#为什么使用线程&quot; class=&quot;headerlink&quot; title=&quot;为什么使用线程&quot;&gt;&lt;/a&gt;为什么使用线程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E7%BA%BF%E7%A8%8B.png?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们需要一种新的实体(&lt;strong&gt;线程&lt;/strong&gt;)，既能够满足不同实体之间可以并发执行，同时可以共享相同的地址空间和文件资源等，相对于进程，&lt;strong&gt;减少创建和切换时的开销&lt;/strong&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="多线程编程" scheme="https://mikeblog.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    
      <category term="操作系统" scheme="https://mikeblog.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统--进程管理(二)</title>
    <link href="https://mikeblog.top/2018/11/03/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E4%BA%8C-2018-11-3/"/>
    <id>https://mikeblog.top/2018/11/03/操作系统-进程管理二-2018-11-3/</id>
    <published>2018-11-03T00:13:53.000Z</published>
    <updated>2019-08-17T07:34:26.495Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进程状态-State&quot;&gt;&lt;a href=&quot;#进程状态-State&quot; class=&quot;headerlink&quot; title=&quot;进程状态(State)&quot;&gt;&lt;/a&gt;进程状态(State)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%9B%BE.png?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作系统通过维护进程状态队列，来对进程进行管理&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 状态队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由操作系统来维护一组队列，用来表示系统当中所有进程的当前状态；&lt;/li&gt;
&lt;li&gt;不同的状态分别用不同的队列来表示(就绪队列，各种类型的阻塞队列)；&lt;/li&gt;
&lt;li&gt;每个进程的PCB都根据它的状态加入到相应的队列当中，当一个进程的状态发生改变时，它的PCB从一个队列中&lt;br&gt;脱离出来，加入到另一个队列。
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mikeblog.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>操作系统--进程管理(一)</title>
    <link href="https://mikeblog.top/2018/11/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E4%B8%80-2018-11-2/"/>
    <id>https://mikeblog.top/2018/11/02/操作系统-进程管理一-2018-11-2/</id>
    <published>2018-11-02T14:23:29.000Z</published>
    <updated>2019-08-17T07:34:26.495Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缅怀&quot;&gt;&lt;a href=&quot;#缅怀&quot; class=&quot;headerlink&quot; title=&quot;缅怀&quot;&gt;&lt;/a&gt;缅怀&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/Yejy813/pictures/blob/master/rose.png?raw=true&quot; alt=&quot;avatar&quot;&gt;&lt;/p&gt;
&lt;p&gt;就在昨天，MVP 的呼声响彻标靶中心球馆，步入不惑的玫瑰，拿下了生涯新高 50 分，曾经的天之骄子，风城玫瑰，NBA 历史上最年轻的常规赛 MVP，经过多年坎途，不曾在病魔面前哭泣，而在昨天却低下了头，落下了泪…   感慨万千，脑海中记着的依然是 09 年那一轮史诗级季后赛，还有那个给芝加哥带来无限希望的玫瑰。此刻，向传奇致敬！加油，罗斯！&lt;br&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://mikeblog.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
